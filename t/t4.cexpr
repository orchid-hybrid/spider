;; c
(include "runtime.c")

(define ((struct scm)
         cons
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r0)
  (declare (struct scm) r1)
  (declare (struct scm) r2)
  (declare (struct scm) r3)
  (set! r2 y)
  (set! r3 x)
  (set! r1 (allocate-vector 2))
  (scm-vector-insert! r1 r2 0)
  (scm-vector-insert! r1 r3 1)
  (set! r0 (make-closure g2499 r1))
  (return r0))

(define ((struct scm) car ((struct scm) env2498) ((struct scm) c))
  (declare (struct scm) r4)
  (declare (struct scm) r5)
  (declare (struct scm) r9)
  (declare (struct scm) clor6)
  (set! clor6 c)
  (set! r9 (allocate-vector 0))
  (set! r5 (make-closure g2500 r9))
  (declare (type scm-fptr) clo7)
  (declare (struct scm) env8)
  (set! clo7
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor6 val) v) elt) 0)
        val)
      f))
  (set! env8
    (array-ref (struct->ref (struct-ref (struct-ref clor6 val) v) elt) 1))
  (set! r4 (clo7 env8 r5))
  (return r4))

(define ((struct scm) cdr ((struct scm) env2498) ((struct scm) c))
  (declare (struct scm) r10)
  (declare (struct scm) r11)
  (declare (struct scm) r15)
  (declare (struct scm) clor12)
  (set! clor12 c)
  (set! r15 (allocate-vector 0))
  (set! r11 (make-closure g2501 r15))
  (declare (type scm-fptr) clo13)
  (declare (struct scm) env14)
  (set! clo13
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor12 val) v) elt) 0)
        val)
      f))
  (set! env14
    (array-ref (struct->ref (struct-ref (struct-ref clor12 val) v) elt) 1))
  (set! r10 (clo13 env14 r11))
  (return r10))

(define ((struct scm)
         begin
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r16)
  (set! r16 y)
  (return r16))

(define ((struct scm) print-each ((struct scm) env2498) ((struct scm) list))
  (declare (struct scm) r17)
  (declare (struct scm) r18)
  (declare (struct scm) r19)
  (declare (struct scm) r20)
  (declare (struct scm) r24)
  (declare (struct scm) r28)
  (declare (struct scm) r32)
  (declare (struct scm) r36)
  (set! r18 list)
  (if (scm-extract-truth r18)
    (begin
      (declare (struct scm) clor21)
      (set! clor21 (scm-wrap-fptr begin))
      (declare (struct scm) clor25)
      (set! clor25 (scm-wrap-fptr scm-print))
      (declare (struct scm) clor29)
      (set! clor29 (scm-wrap-fptr car))
      (set! r28 list)
      (declare (type scm-fptr) clo30)
      (declare (struct scm) env31)
      (set! clo30
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor29 val) v) elt)
              0)
            val)
          f))
      (set! env31
        (array-ref (struct->ref (struct-ref (struct-ref clor29 val) v) elt) 1))
      (set! r24 (clo30 env31 r28))
      (declare (type scm-fptr) clo26)
      (declare (struct scm) env27)
      (set! clo26
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor25 val) v) elt)
              0)
            val)
          f))
      (set! env27
        (array-ref (struct->ref (struct-ref (struct-ref clor25 val) v) elt) 1))
      (set! r19 (clo26 env27 r24))
      (declare (struct scm) clor33)
      (set! clor33 (scm-wrap-fptr print-each))
      (declare (struct scm) clor37)
      (set! clor37 (scm-wrap-fptr cdr))
      (set! r36 list)
      (declare (type scm-fptr) clo38)
      (declare (struct scm) env39)
      (set! clo38
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor37 val) v) elt)
              0)
            val)
          f))
      (set! env39
        (array-ref (struct->ref (struct-ref (struct-ref clor37 val) v) elt) 1))
      (set! r32 (clo38 env39 r36))
      (declare (type scm-fptr) clo34)
      (declare (struct scm) env35)
      (set! clo34
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor33 val) v) elt)
              0)
            val)
          f))
      (set! env35
        (array-ref (struct->ref (struct-ref (struct-ref clor33 val) v) elt) 1))
      (set! r20 (clo34 env35 r32))
      (declare (type scm-fptr) clo22)
      (declare (struct scm) env23)
      (set! clo22
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor21 val) v) elt)
              0)
            val)
          f))
      (set! env23
        (array-ref (struct->ref (struct-ref (struct-ref clor21 val) v) elt) 1))
      (set! r17 (clo22 env23 r19 r20)))
    (begin
      (declare (struct scm) clor21)
      (set! clor21 (scm-wrap-fptr begin))
      (declare (struct scm) clor25)
      (set! clor25 (scm-wrap-fptr scm-print))
      (declare (struct scm) clor29)
      (set! clor29 (scm-wrap-fptr car))
      (set! r28 list)
      (declare (type scm-fptr) clo30)
      (declare (struct scm) env31)
      (set! clo30
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor29 val) v) elt)
              0)
            val)
          f))
      (set! env31
        (array-ref (struct->ref (struct-ref (struct-ref clor29 val) v) elt) 1))
      (set! r24 (clo30 env31 r28))
      (declare (type scm-fptr) clo26)
      (declare (struct scm) env27)
      (set! clo26
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor25 val) v) elt)
              0)
            val)
          f))
      (set! env27
        (array-ref (struct->ref (struct-ref (struct-ref clor25 val) v) elt) 1))
      (set! r19 (clo26 env27 r24))
      (declare (struct scm) clor33)
      (set! clor33 (scm-wrap-fptr print-each))
      (declare (struct scm) clor37)
      (set! clor37 (scm-wrap-fptr cdr))
      (set! r36 list)
      (declare (type scm-fptr) clo38)
      (declare (struct scm) env39)
      (set! clo38
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor37 val) v) elt)
              0)
            val)
          f))
      (set! env39
        (array-ref (struct->ref (struct-ref (struct-ref clor37 val) v) elt) 1))
      (set! r32 (clo38 env39 r36))
      (declare (type scm-fptr) clo34)
      (declare (struct scm) env35)
      (set! clo34
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor33 val) v) elt)
              0)
            val)
          f))
      (set! env35
        (array-ref (struct->ref (struct-ref (struct-ref clor33 val) v) elt) 1))
      (set! r20 (clo34 env35 r32))
      (declare (type scm-fptr) clo22)
      (declare (struct scm) env23)
      (set! clo22
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor21 val) v) elt)
              0)
            val)
          f))
      (set! env23
        (array-ref (struct->ref (struct-ref (struct-ref clor21 val) v) elt) 1))
      (set! r17 (clo22 env23 r19 r20))))
  (return r17))

(define ((struct scm) scm-main ((struct scm) env2498))
  (declare (struct scm) r40)
  (declare (struct scm) r41)
  (declare (struct scm) r45)
  (declare (struct scm) r46)
  (declare (struct scm) r50)
  (declare (struct scm) r51)
  (declare (struct scm) r55)
  (declare (struct scm) r56)
  (declare (struct scm) clor42)
  (set! clor42 (scm-wrap-fptr print-each))
  (declare (struct scm) clor47)
  (set! clor47 (scm-wrap-fptr cons))
  (set! r45 (scm-string-to-vector "Hello"))
  (declare (struct scm) clor52)
  (set! clor52 (scm-wrap-fptr cons))
  (set! r50 (scm-string-to-vector "World"))
  (declare (struct scm) clor57)
  (set! clor57 (scm-wrap-fptr cons))
  (set! r55 (scm-string-to-vector "!"))
  (set! r56 (make-struct (struct scm) (tag 0) (val.i 0)))
  (declare (type scm-fptr) clo58)
  (declare (struct scm) env59)
  (set! clo58
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor57 val) v) elt) 0)
        val)
      f))
  (set! env59
    (array-ref (struct->ref (struct-ref (struct-ref clor57 val) v) elt) 1))
  (set! r51 (clo58 env59 r55 r56))
  (declare (type scm-fptr) clo53)
  (declare (struct scm) env54)
  (set! clo53
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor52 val) v) elt) 0)
        val)
      f))
  (set! env54
    (array-ref (struct->ref (struct-ref (struct-ref clor52 val) v) elt) 1))
  (set! r46 (clo53 env54 r50 r51))
  (declare (type scm-fptr) clo48)
  (declare (struct scm) env49)
  (set! clo48
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor47 val) v) elt) 0)
        val)
      f))
  (set! env49
    (array-ref (struct->ref (struct-ref (struct-ref clor47 val) v) elt) 1))
  (set! r41 (clo48 env49 r45 r46))
  (declare (type scm-fptr) clo43)
  (declare (struct scm) env44)
  (set! clo43
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor42 val) v) elt) 0)
        val)
      f))
  (set! env44
    (array-ref (struct->ref (struct-ref (struct-ref clor42 val) v) elt) 1))
  (set! r40 (clo43 env44 r41))
  (return r40))

(define ((struct scm)
         g2501
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r60)
  (set! r60 y)
  (return r60))

(define ((struct scm)
         g2500
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r61)
  (set! r61 x)
  (return r61))

(define ((struct scm) g2499 ((struct scm) env2498) ((struct scm) selector))
  (declare (struct scm) r62)
  (declare (struct scm) r63)
  (declare (struct scm) r64)
  (declare (struct scm) r68)
  (declare (struct scm) r69)
  (declare (struct scm) r70)
  (declare (struct scm) r71)
  (declare (struct scm) clor65)
  (set! clor65 selector)
  (set! r68 env2498)
  (set! r69 (make-struct (struct scm) (tag 0) (val.i 1)))
  (set! r63 (scm-vector-ref r68 r69))
  (set! r70 env2498)
  (set! r71 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r64 (scm-vector-ref r70 r71))
  (declare (type scm-fptr) clo66)
  (declare (struct scm) env67)
  (set! clo66
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor65 val) v) elt) 0)
        val)
      f))
  (set! env67
    (array-ref (struct->ref (struct-ref (struct-ref clor65 val) v) elt) 1))
  (set! r62 (clo66 env67 r63 r64))
  (return r62))

