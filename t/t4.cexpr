;; c
(include "runtime.c")

(define ((struct scm)
         cons
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r0)
  (declare (struct scm) r1)
  (declare (struct scm) r2)
  (declare (struct scm) r3)
  (refcount-dec env2498 1)
  (set! r2 y)
  (set! r3 x)
  (set! r1 (allocate-vector 2))
  (scm-vector-insert! r1 r2 0)
  (scm-vector-insert! r1 r3 1)
  (set! r0 (make-closure g2499 r1))
  (return r0))

(define ((struct scm) car ((struct scm) env2498) ((struct scm) c))
  (declare (struct scm) r4)
  (declare (struct scm) r5)
  (declare (struct scm) r9)
  (refcount-dec env2498 1)
  (declare (struct scm) clor6)
  (set! clor6 c)
  (set! r9 (allocate-vector 0))
  (set! r5 (make-closure g2500 r9))
  (declare (type scm-fptr) clo7)
  (declare (struct scm) env8)
  (set! clo7
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor6 val) v) elt) 0)
        val)
      f))
  (set! env8
    (array-ref (struct->ref (struct-ref (struct-ref clor6 val) v) elt) 1))
  (set! r4 (clo7 env8 r5))
  (refcount-dec-one clor6)
  (return r4))

(define ((struct scm) cdr ((struct scm) env2498) ((struct scm) c))
  (declare (struct scm) r10)
  (declare (struct scm) r11)
  (declare (struct scm) r15)
  (refcount-dec env2498 1)
  (declare (struct scm) clor12)
  (set! clor12 c)
  (set! r15 (allocate-vector 0))
  (set! r11 (make-closure g2501 r15))
  (declare (type scm-fptr) clo13)
  (declare (struct scm) env14)
  (set! clo13
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor12 val) v) elt) 0)
        val)
      f))
  (set! env14
    (array-ref (struct->ref (struct-ref (struct-ref clor12 val) v) elt) 1))
  (set! r10 (clo13 env14 r11))
  (refcount-dec-one clor12)
  (return r10))

(define ((struct scm) print-each ((struct scm) env2498) ((struct scm) list))
  (declare (struct scm) r16)
  (declare (struct scm) r17)
  (declare (struct scm) r18)
  (declare (struct scm) r22)
  (declare (struct scm) r26)
  (declare (struct scm) r30)
  (refcount-dec env2498 1)
  (refcount-inc list 2)
  (set! r17 list)
  (if (scm-extract-truth r17)
    (begin
      (declare (struct scm) clor19)
      (set! clor19 (scm-wrap-fptr scm-print))
      (declare (struct scm) clor23)
      (set! clor23 (scm-wrap-fptr car))
      (set! r22 list)
      (declare (type scm-fptr) clo24)
      (declare (struct scm) env25)
      (set! clo24
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor23 val) v) elt)
              0)
            val)
          f))
      (set! env25
        (array-ref (struct->ref (struct-ref (struct-ref clor23 val) v) elt) 1))
      (set! r18 (clo24 env25 r22))
      (refcount-dec-one clor23)
      (declare (type scm-fptr) clo20)
      (declare (struct scm) env21)
      (set! clo20
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor19 val) v) elt)
              0)
            val)
          f))
      (set! env21
        (array-ref (struct->ref (struct-ref (struct-ref clor19 val) v) elt) 1))
      (clo20 env21 r18)
      (refcount-dec-one clor19)
      (declare (struct scm) clor27)
      (set! clor27 (scm-wrap-fptr print-each))
      (declare (struct scm) clor31)
      (set! clor31 (scm-wrap-fptr cdr))
      (set! r30 list)
      (declare (type scm-fptr) clo32)
      (declare (struct scm) env33)
      (set! clo32
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor31 val) v) elt)
              0)
            val)
          f))
      (set! env33
        (array-ref (struct->ref (struct-ref (struct-ref clor31 val) v) elt) 1))
      (set! r26 (clo32 env33 r30))
      (refcount-dec-one clor31)
      (declare (type scm-fptr) clo28)
      (declare (struct scm) env29)
      (set! clo28
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor27 val) v) elt)
              0)
            val)
          f))
      (set! env29
        (array-ref (struct->ref (struct-ref (struct-ref clor27 val) v) elt) 1))
      (set! r16 (clo28 env29 r26))
      (refcount-dec-one clor27))
    (begin
      (refcount-dec list 2)
      (set! r16 (make-struct (struct scm) (tag 0) (val.i 0)))))
  (return r16))

(define ((struct scm) scm-main ((struct scm) env2498))
  (declare (struct scm) r34)
  (declare (struct scm) r35)
  (declare (struct scm) r39)
  (declare (struct scm) r40)
  (declare (struct scm) r44)
  (declare (struct scm) r45)
  (declare (struct scm) r49)
  (declare (struct scm) r50)
  (refcount-dec env2498 1)
  (declare (struct scm) clor36)
  (set! clor36 (scm-wrap-fptr print-each))
  (declare (struct scm) clor41)
  (set! clor41 (scm-wrap-fptr cons))
  (set! r39 (scm-string-to-vector "Hello"))
  (declare (struct scm) clor46)
  (set! clor46 (scm-wrap-fptr cons))
  (set! r44 (scm-string-to-vector "World"))
  (declare (struct scm) clor51)
  (set! clor51 (scm-wrap-fptr cons))
  (set! r49 (scm-string-to-vector "!"))
  (set! r50 (make-struct (struct scm) (tag 0) (val.i 0)))
  (declare (type scm-fptr) clo52)
  (declare (struct scm) env53)
  (set! clo52
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor51 val) v) elt) 0)
        val)
      f))
  (set! env53
    (array-ref (struct->ref (struct-ref (struct-ref clor51 val) v) elt) 1))
  (set! r45 (clo52 env53 r49 r50))
  (refcount-dec-one clor51)
  (declare (type scm-fptr) clo47)
  (declare (struct scm) env48)
  (set! clo47
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor46 val) v) elt) 0)
        val)
      f))
  (set! env48
    (array-ref (struct->ref (struct-ref (struct-ref clor46 val) v) elt) 1))
  (set! r40 (clo47 env48 r44 r45))
  (refcount-dec-one clor46)
  (declare (type scm-fptr) clo42)
  (declare (struct scm) env43)
  (set! clo42
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor41 val) v) elt) 0)
        val)
      f))
  (set! env43
    (array-ref (struct->ref (struct-ref (struct-ref clor41 val) v) elt) 1))
  (set! r35 (clo42 env43 r39 r40))
  (refcount-dec-one clor41)
  (declare (type scm-fptr) clo37)
  (declare (struct scm) env38)
  (set! clo37
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor36 val) v) elt) 0)
        val)
      f))
  (set! env38
    (array-ref (struct->ref (struct-ref (struct-ref clor36 val) v) elt) 1))
  (set! r34 (clo37 env38 r35))
  (refcount-dec-one clor36)
  (return r34))

(define ((struct scm)
         g2501
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r54)
  (refcount-dec env2498 1)
  (refcount-dec x 1)
  (set! r54 y)
  (return r54))

(define ((struct scm)
         g2500
         ((struct scm) env2498)
         ((struct scm) x)
         ((struct scm) y))
  (declare (struct scm) r55)
  (refcount-dec env2498 1)
  (refcount-dec y 1)
  (set! r55 x)
  (return r55))

(define ((struct scm) g2499 ((struct scm) env2498) ((struct scm) selector))
  (declare (struct scm) r56)
  (declare (struct scm) r57)
  (declare (struct scm) r58)
  (declare (struct scm) r62)
  (declare (struct scm) r63)
  (declare (struct scm) r64)
  (declare (struct scm) r65)
  (declare (struct scm) r66)
  (declare (struct scm) r67)
  (refcount-inc env2498 1)
  (declare (struct scm) clor59)
  (set! clor59 selector)
  (set! r62 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r63 env2498)
  (set! r64 (make-struct (struct scm) (tag 0) (val.i 1)))
  (set! r57 (scm-vector-ref r62 r63 r64))
  (set! r65 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r66 env2498)
  (set! r67 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r58 (scm-vector-ref r65 r66 r67))
  (declare (type scm-fptr) clo60)
  (declare (struct scm) env61)
  (set! clo60
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor59 val) v) elt) 0)
        val)
      f))
  (set! env61
    (array-ref (struct->ref (struct-ref (struct-ref clor59 val) v) elt) 1))
  (set! r56 (clo60 env61 r57 r58))
  (refcount-dec-one clor59)
  (return r56))

