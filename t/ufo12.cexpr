;; c
(include "runtime.c")

(define ((struct scm) hash ((struct scm) env2498))
  (declare (struct scm) r0)
  (refcount-dec env2498 1)
  (set! r0 (make-struct (struct scm) (tag 0) (val.i 35)))
  (return r0))

(define ((struct scm) space ((struct scm) env2498))
  (declare (struct scm) r1)
  (refcount-dec env2498 1)
  (set! r1 (make-struct (struct scm) (tag 0) (val.i 32)))
  (return r1))

(define ((struct scm) classify ((struct scm) env2498) ((struct scm) chr))
  (declare (struct scm) r2)
  (declare (struct scm) r3)
  (declare (struct scm) r4)
  (declare (struct scm) r5)
  (refcount-dec env2498 1)
  (declare (struct scm) clor6)
  (set! clor6 (scm-wrap-fptr scm-eq))
  (set! r4 chr)
  (declare (struct scm) clor9)
  (set! clor9 (scm-wrap-fptr hash))
  (declare (type scm-fptr) clo10)
  (declare (struct scm) env11)
  (set! clo10
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor9 val) v) elt) 0)
        val)
      f))
  (set! env11
    (array-ref (struct->ref (struct-ref (struct-ref clor9 val) v) elt) 1))
  (refcount-inc-one env11)
  (set! r5 (clo10 env11))
  (refcount-dec-one clor9)
  (declare (type scm-fptr) clo7)
  (declare (struct scm) env8)
  (set! clo7
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor6 val) v) elt) 0)
        val)
      f))
  (set! env8
    (array-ref (struct->ref (struct-ref (struct-ref clor6 val) v) elt) 1))
  (refcount-inc-one env8)
  (set! r3 (clo7 env8 r4 r5))
  (refcount-dec-one clor6)
  (if (scm-extract-truth r3)
    (begin (set! r2 (make-struct (struct scm) (tag 0) (val.i 1))))
    (begin (set! r2 (make-struct (struct scm) (tag 0) (val.i 0)))))
  (return r2))

(define ((struct scm) not ((struct scm) env2498) ((struct scm) x))
  (declare (struct scm) r12)
  (declare (struct scm) r13)
  (refcount-dec env2498 1)
  (set! r13 x)
  (if (scm-extract-truth r13)
    (begin (set! r12 (make-struct (struct scm) (tag 0) (val.i 0))))
    (begin (set! r12 (make-struct (struct scm) (tag 0) (val.i 1)))))
  (return r12))

(define ((struct scm)
         or
         ((struct scm) env2498)
         ((struct scm) a)
         ((struct scm) b))
  (declare (struct scm) r14)
  (declare (struct scm) r15)
  (refcount-dec env2498 1)
  (set! r15 a)
  (if (scm-extract-truth r15)
    (begin
      (refcount-dec b 1)
      (set! r14 (make-struct (struct scm) (tag 0) (val.i 1))))
    (begin (set! r14 b)))
  (return r14))

(define ((struct scm)
         rule-30
         ((struct scm) env2498)
         ((struct scm) a)
         ((struct scm) b)
         ((struct scm) c))
  (declare (struct scm) r16)
  (declare (struct scm) r17)
  (declare (struct scm) r18)
  (declare (struct scm) r19)
  (declare (struct scm) r23)
  (declare (struct scm) r24)
  (declare (struct scm) r28)
  (declare (struct scm) r29)
  (declare (struct scm) r33)
  (declare (struct scm) r34)
  (declare (struct scm) r38)
  (declare (struct scm) r39)
  (refcount-dec env2498 1)
  (refcount-inc a 1)
  (refcount-inc b 1)
  (set! r18 a)
  (if (scm-extract-truth r18)
    (begin
      (refcount-dec a 1)
      (refcount-dec b 1)
      (declare (struct scm) clor20)
      (set! clor20 (scm-wrap-fptr not))
      (declare (struct scm) clor25)
      (set! clor25 (scm-wrap-fptr or))
      (set! r23 b)
      (set! r24 c)
      (declare (type scm-fptr) clo26)
      (declare (struct scm) env27)
      (set! clo26
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor25 val) v) elt)
              0)
            val)
          f))
      (set! env27
        (array-ref (struct->ref (struct-ref (struct-ref clor25 val) v) elt) 1))
      (refcount-inc-one env27)
      (set! r19 (clo26 env27 r23 r24))
      (refcount-dec-one clor25)
      (declare (type scm-fptr) clo21)
      (declare (struct scm) env22)
      (set! clo21
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor20 val) v) elt)
              0)
            val)
          f))
      (set! env22
        (array-ref (struct->ref (struct-ref (struct-ref clor20 val) v) elt) 1))
      (refcount-inc-one env22)
      (set! r17 (clo21 env22 r19))
      (refcount-dec-one clor20))
    (begin
      (set! r28 b)
      (if (scm-extract-truth r28)
        (begin
          (refcount-dec b 1)
          (refcount-dec c 1)
          (declare (struct scm) clor30)
          (set! clor30 (scm-wrap-fptr not))
          (set! r29 a)
          (declare (type scm-fptr) clo31)
          (declare (struct scm) env32)
          (set! clo31
            (struct-ref
              (struct-ref
                (array-ref
                  (struct->ref (struct-ref (struct-ref clor30 val) v) elt)
                  0)
                val)
              f))
          (set! env32
            (array-ref
              (struct->ref (struct-ref (struct-ref clor30 val) v) elt)
              1))
          (refcount-inc-one env32)
          (set! r17 (clo31 env32 r29))
          (refcount-dec-one clor30))
        (begin
          (set! r33 c)
          (if (scm-extract-truth r33)
            (begin
              (declare (struct scm) clor35)
              (set! clor35 (scm-wrap-fptr not))
              (declare (struct scm) clor40)
              (set! clor40 (scm-wrap-fptr or))
              (set! r38 a)
              (set! r39 b)
              (declare (type scm-fptr) clo41)
              (declare (struct scm) env42)
              (set! clo41
                (struct-ref
                  (struct-ref
                    (array-ref
                      (struct->ref (struct-ref (struct-ref clor40 val) v) elt)
                      0)
                    val)
                  f))
              (set! env42
                (array-ref
                  (struct->ref (struct-ref (struct-ref clor40 val) v) elt)
                  1))
              (refcount-inc-one env42)
              (set! r34 (clo41 env42 r38 r39))
              (refcount-dec-one clor40)
              (declare (type scm-fptr) clo36)
              (declare (struct scm) env37)
              (set! clo36
                (struct-ref
                  (struct-ref
                    (array-ref
                      (struct->ref (struct-ref (struct-ref clor35 val) v) elt)
                      0)
                    val)
                  f))
              (set! env37
                (array-ref
                  (struct->ref (struct-ref (struct-ref clor35 val) v) elt)
                  1))
              (refcount-inc-one env37)
              (set! r17 (clo36 env37 r34))
              (refcount-dec-one clor35))
            (begin
              (refcount-dec a 1)
              (refcount-dec b 1)
              (set! r17 (make-struct (struct scm) (tag 0) (val.i 0)))))))))
  (if (scm-extract-truth r17)
    (begin
      (declare (struct scm) clor43)
      (set! clor43 (scm-wrap-fptr hash))
      (declare (type scm-fptr) clo44)
      (declare (struct scm) env45)
      (set! clo44
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor43 val) v) elt)
              0)
            val)
          f))
      (set! env45
        (array-ref (struct->ref (struct-ref (struct-ref clor43 val) v) elt) 1))
      (refcount-inc-one env45)
      (set! r16 (clo44 env45))
      (refcount-dec-one clor43))
    (begin
      (declare (struct scm) clor46)
      (set! clor46 (scm-wrap-fptr space))
      (declare (type scm-fptr) clo47)
      (declare (struct scm) env48)
      (set! clo47
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor46 val) v) elt)
              0)
            val)
          f))
      (set! env48
        (array-ref (struct->ref (struct-ref (struct-ref clor46 val) v) elt) 1))
      (refcount-inc-one env48)
      (set! r16 (clo47 env48))
      (refcount-dec-one clor46)))
  (return r16))

(define ((struct scm)
         next
         ((struct scm) env2498)
         ((struct scm) vec)
         ((struct scm) len))
  (declare (struct scm) r49)
  (declare (struct scm) r50)
  (declare (struct scm) r51)
  (declare (struct scm) r52)
  (refcount-dec env2498 1)
  (set! r51 len)
  (set! r52 vec)
  (set! r50 (allocate-vector 2))
  (scm-vector-insert! r50 r51 0)
  (scm-vector-insert! r50 r52 1)
  (set! r49 (make-closure g2499 r50))
  (return r49))

(define ((struct scm) size ((struct scm) env2498))
  (declare (struct scm) r53)
  (refcount-dec env2498 1)
  (set! r53 (make-struct (struct scm) (tag 0) (val.i 60)))
  (return r53))

(define ((struct scm) initial-condition ((struct scm) env2498))
  (declare (struct scm) r54)
  (declare (struct scm) r55)
  (declare (struct scm) r56)
  (declare (struct scm) r63)
  (refcount-dec env2498 1)
  (declare (struct scm) clor57)
  (set! clor57 (scm-wrap-fptr scm-make-vector))
  (declare (struct scm) clor60)
  (set! clor60 (scm-wrap-fptr size))
  (declare (type scm-fptr) clo61)
  (declare (struct scm) env62)
  (set! clo61
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor60 val) v) elt) 0)
        val)
      f))
  (set! env62
    (array-ref (struct->ref (struct-ref (struct-ref clor60 val) v) elt) 1))
  (refcount-inc-one env62)
  (set! r55 (clo61 env62))
  (refcount-dec-one clor60)
  (set! r63 (allocate-vector 0))
  (set! r56 (make-closure g2500 r63))
  (declare (type scm-fptr) clo58)
  (declare (struct scm) env59)
  (set! clo58
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor57 val) v) elt) 0)
        val)
      f))
  (set! env59
    (array-ref (struct->ref (struct-ref (struct-ref clor57 val) v) elt) 1))
  (refcount-inc-one env59)
  (set! r54 (clo58 env59 r55 r56))
  (refcount-dec-one clor57)
  (return r54))

(define ((struct scm) print-line ((struct scm) env2498) ((struct scm) l))
  (declare (struct scm) r64)
  (declare (struct scm) r65)
  (declare (struct scm) r69)
  (refcount-dec env2498 1)
  (declare (struct scm) clor66)
  (set! clor66 (scm-wrap-fptr scm-print))
  (set! r65 l)
  (declare (type scm-fptr) clo67)
  (declare (struct scm) env68)
  (set! clo67
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor66 val) v) elt) 0)
        val)
      f))
  (set! env68
    (array-ref (struct->ref (struct-ref (struct-ref clor66 val) v) elt) 1))
  (refcount-inc-one env68)
  (clo67 env68 r65)
  (refcount-dec-one clor66)
  (declare (struct scm) clor70)
  (set! clor70 (scm-wrap-fptr scm-print))
  (set! r69 (scm-string-to-vector "\n"))
  (declare (type scm-fptr) clo71)
  (declare (struct scm) env72)
  (set! clo71
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor70 val) v) elt) 0)
        val)
      f))
  (set! env72
    (array-ref (struct->ref (struct-ref (struct-ref clor70 val) v) elt) 1))
  (refcount-inc-one env72)
  (set! r64 (clo71 env72 r69))
  (refcount-dec-one clor70)
  (return r64))

(define ((struct scm)
         do-times
         ((struct scm) env2498)
         ((struct scm) n)
         ((struct scm) state))
  (declare (struct scm) r73)
  (declare (struct scm) r74)
  (declare (struct scm) r78)
  (declare (struct scm) r79)
  (declare (struct scm) r80)
  (declare (struct scm) r84)
  (declare (struct scm) r85)
  (declare (struct scm) r89)
  (declare (struct scm) r90)
  (declare (struct scm) r94)
  (declare (struct scm) r95)
  (declare (struct scm) r102)
  (declare (struct scm) r103)
  (refcount-dec env2498 1)
  (refcount-inc n 1)
  (refcount-inc state 1)
  (declare (struct scm) clor75)
  (set! clor75 (scm-wrap-fptr print-line))
  (set! r74 state)
  (declare (type scm-fptr) clo76)
  (declare (struct scm) env77)
  (set! clo76
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor75 val) v) elt) 0)
        val)
      f))
  (set! env77
    (array-ref (struct->ref (struct-ref (struct-ref clor75 val) v) elt) 1))
  (refcount-inc-one env77)
  (clo76 env77 r74)
  (refcount-dec-one clor75)
  (declare (struct scm) clor81)
  (set! clor81 (scm-wrap-fptr scm-eq))
  (set! r79 n)
  (set! r80 (make-struct (struct scm) (tag 0) (val.i 0)))
  (declare (type scm-fptr) clo82)
  (declare (struct scm) env83)
  (set! clo82
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor81 val) v) elt) 0)
        val)
      f))
  (set! env83
    (array-ref (struct->ref (struct-ref (struct-ref clor81 val) v) elt) 1))
  (refcount-inc-one env83)
  (set! r78 (clo82 env83 r79 r80))
  (refcount-dec-one clor81)
  (if (scm-extract-truth r78)
    (begin
      (refcount-dec n 1)
      (refcount-dec state 1)
      (set! r73 (make-struct (struct scm) (tag 0) (val.i 0))))
    (begin
      (declare (struct scm) clor86)
      (set! clor86 (scm-wrap-fptr do-times))
      (declare (struct scm) clor91)
      (set! clor91 (scm-wrap-fptr scm-minus))
      (set! r89 n)
      (set! r90 (make-struct (struct scm) (tag 0) (val.i 1)))
      (declare (type scm-fptr) clo92)
      (declare (struct scm) env93)
      (set! clo92
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor91 val) v) elt)
              0)
            val)
          f))
      (set! env93
        (array-ref (struct->ref (struct-ref (struct-ref clor91 val) v) elt) 1))
      (refcount-inc-one env93)
      (set! r84 (clo92 env93 r89 r90))
      (refcount-dec-one clor91)
      (declare (struct scm) clor96)
      (set! clor96 (scm-wrap-fptr scm-make-vector))
      (declare (struct scm) clor99)
      (set! clor99 (scm-wrap-fptr size))
      (declare (type scm-fptr) clo100)
      (declare (struct scm) env101)
      (set! clo100
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor99 val) v) elt)
              0)
            val)
          f))
      (set! env101
        (array-ref (struct->ref (struct-ref (struct-ref clor99 val) v) elt) 1))
      (refcount-inc-one env101)
      (set! r94 (clo100 env101))
      (refcount-dec-one clor99)
      (declare (struct scm) clor104)
      (set! clor104 (scm-wrap-fptr next))
      (set! r102 state)
      (declare (struct scm) clor107)
      (set! clor107 (scm-wrap-fptr size))
      (declare (type scm-fptr) clo108)
      (declare (struct scm) env109)
      (set! clo108
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor107 val) v) elt)
              0)
            val)
          f))
      (set! env109
        (array-ref
          (struct->ref (struct-ref (struct-ref clor107 val) v) elt)
          1))
      (refcount-inc-one env109)
      (set! r103 (clo108 env109))
      (refcount-dec-one clor107)
      (declare (type scm-fptr) clo105)
      (declare (struct scm) env106)
      (set! clo105
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor104 val) v) elt)
              0)
            val)
          f))
      (set! env106
        (array-ref
          (struct->ref (struct-ref (struct-ref clor104 val) v) elt)
          1))
      (refcount-inc-one env106)
      (set! r95 (clo105 env106 r102 r103))
      (refcount-dec-one clor104)
      (declare (type scm-fptr) clo97)
      (declare (struct scm) env98)
      (set! clo97
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor96 val) v) elt)
              0)
            val)
          f))
      (set! env98
        (array-ref (struct->ref (struct-ref (struct-ref clor96 val) v) elt) 1))
      (refcount-inc-one env98)
      (set! r85 (clo97 env98 r94 r95))
      (refcount-dec-one clor96)
      (declare (type scm-fptr) clo87)
      (declare (struct scm) env88)
      (set! clo87
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor86 val) v) elt)
              0)
            val)
          f))
      (set! env88
        (array-ref (struct->ref (struct-ref (struct-ref clor86 val) v) elt) 1))
      (refcount-inc-one env88)
      (set! r73 (clo87 env88 r84 r85))
      (refcount-dec-one clor86)))
  (return r73))

(define ((struct scm) scm-main ((struct scm) env2498))
  (declare (struct scm) r110)
  (declare (struct scm) r111)
  (declare (struct scm) r112)
  (refcount-dec env2498 1)
  (declare (struct scm) clor113)
  (set! clor113 (scm-wrap-fptr do-times))
  (declare (struct scm) clor116)
  (set! clor116 (scm-wrap-fptr size))
  (declare (type scm-fptr) clo117)
  (declare (struct scm) env118)
  (set! clo117
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor116 val) v) elt) 0)
        val)
      f))
  (set! env118
    (array-ref (struct->ref (struct-ref (struct-ref clor116 val) v) elt) 1))
  (refcount-inc-one env118)
  (set! r111 (clo117 env118))
  (refcount-dec-one clor116)
  (declare (struct scm) clor119)
  (set! clor119 (scm-wrap-fptr initial-condition))
  (declare (type scm-fptr) clo120)
  (declare (struct scm) env121)
  (set! clo120
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor119 val) v) elt) 0)
        val)
      f))
  (set! env121
    (array-ref (struct->ref (struct-ref (struct-ref clor119 val) v) elt) 1))
  (refcount-inc-one env121)
  (set! r112 (clo120 env121))
  (refcount-dec-one clor119)
  (declare (type scm-fptr) clo114)
  (declare (struct scm) env115)
  (set! clo114
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor113 val) v) elt) 0)
        val)
      f))
  (set! env115
    (array-ref (struct->ref (struct-ref (struct-ref clor113 val) v) elt) 1))
  (refcount-inc-one env115)
  (set! r110 (clo114 env115 r111 r112))
  (refcount-dec-one clor113)
  (return r110))

(define ((struct scm) g2500 ((struct scm) env2498) ((struct scm) i))
  (declare (struct scm) r122)
  (declare (struct scm) r123)
  (declare (struct scm) r124)
  (declare (struct scm) r125)
  (declare (struct scm) r129)
  (declare (struct scm) r130)
  (refcount-dec env2498 1)
  (declare (struct scm) clor126)
  (set! clor126 (scm-wrap-fptr scm-eq))
  (set! r124 i)
  (declare (struct scm) clor131)
  (set! clor131 (scm-wrap-fptr scm-divide))
  (declare (struct scm) clor134)
  (set! clor134 (scm-wrap-fptr size))
  (declare (type scm-fptr) clo135)
  (declare (struct scm) env136)
  (set! clo135
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor134 val) v) elt) 0)
        val)
      f))
  (set! env136
    (array-ref (struct->ref (struct-ref (struct-ref clor134 val) v) elt) 1))
  (refcount-inc-one env136)
  (set! r129 (clo135 env136))
  (refcount-dec-one clor134)
  (set! r130 (make-struct (struct scm) (tag 0) (val.i 2)))
  (declare (type scm-fptr) clo132)
  (declare (struct scm) env133)
  (set! clo132
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor131 val) v) elt) 0)
        val)
      f))
  (set! env133
    (array-ref (struct->ref (struct-ref (struct-ref clor131 val) v) elt) 1))
  (refcount-inc-one env133)
  (set! r125 (clo132 env133 r129 r130))
  (refcount-dec-one clor131)
  (declare (type scm-fptr) clo127)
  (declare (struct scm) env128)
  (set! clo127
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor126 val) v) elt) 0)
        val)
      f))
  (set! env128
    (array-ref (struct->ref (struct-ref (struct-ref clor126 val) v) elt) 1))
  (refcount-inc-one env128)
  (set! r123 (clo127 env128 r124 r125))
  (refcount-dec-one clor126)
  (if (scm-extract-truth r123)
    (begin
      (declare (struct scm) clor137)
      (set! clor137 (scm-wrap-fptr hash))
      (declare (type scm-fptr) clo138)
      (declare (struct scm) env139)
      (set! clo138
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor137 val) v) elt)
              0)
            val)
          f))
      (set! env139
        (array-ref
          (struct->ref (struct-ref (struct-ref clor137 val) v) elt)
          1))
      (refcount-inc-one env139)
      (set! r122 (clo138 env139))
      (refcount-dec-one clor137))
    (begin
      (declare (struct scm) clor140)
      (set! clor140 (scm-wrap-fptr space))
      (declare (type scm-fptr) clo141)
      (declare (struct scm) env142)
      (set! clo141
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor140 val) v) elt)
              0)
            val)
          f))
      (set! env142
        (array-ref
          (struct->ref (struct-ref (struct-ref clor140 val) v) elt)
          1))
      (refcount-inc-one env142)
      (set! r122 (clo141 env142))
      (refcount-dec-one clor140)))
  (return r122))

(define ((struct scm) g2499 ((struct scm) env2498) ((struct scm) i))
  (declare (struct scm) r143)
  (declare (struct scm) r144)
  (declare (struct scm) r145)
  (declare (struct scm) r146)
  (declare (struct scm) r150)
  (declare (struct scm) r151)
  (declare (struct scm) r152)
  (declare (struct scm) r156)
  (declare (struct scm) r160)
  (declare (struct scm) r161)
  (declare (struct scm) r165)
  (declare (struct scm) r166)
  (declare (struct scm) r167)
  (declare (struct scm) r168)
  (declare (struct scm) r169)
  (declare (struct scm) r173)
  (declare (struct scm) r177)
  (declare (struct scm) r178)
  (declare (struct scm) r182)
  (declare (struct scm) r183)
  (declare (struct scm) r184)
  (declare (struct scm) r185)
  (declare (struct scm) r186)
  (declare (struct scm) r187)
  (declare (struct scm) r191)
  (declare (struct scm) r192)
  (declare (struct scm) r196)
  (declare (struct scm) r197)
  (declare (struct scm) r198)
  (declare (struct scm) r199)
  (declare (struct scm) r203)
  (declare (struct scm) r204)
  (declare (struct scm) r208)
  (declare (struct scm) r209)
  (declare (struct scm) r210)
  (declare (struct scm) r211)
  (declare (struct scm) r212)
  (refcount-inc env2498 3)
  (refcount-inc i 4)
  (declare (struct scm) clor147)
  (set! clor147 (scm-wrap-fptr rule-30))
  (declare (struct scm) clor153)
  (set! clor153 (scm-wrap-fptr scm-eq))
  (set! r151 i)
  (set! r152 (make-struct (struct scm) (tag 0) (val.i 0)))
  (declare (type scm-fptr) clo154)
  (declare (struct scm) env155)
  (set! clo154
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor153 val) v) elt) 0)
        val)
      f))
  (set! env155
    (array-ref (struct->ref (struct-ref (struct-ref clor153 val) v) elt) 1))
  (refcount-inc-one env155)
  (set! r150 (clo154 env155 r151 r152))
  (refcount-dec-one clor153)
  (if (scm-extract-truth r150)
    (begin
      (refcount-dec i 1)
      (refcount-dec env2498 1)
      (set! r144 (make-struct (struct scm) (tag 0) (val.i 0))))
    (begin
      (declare (struct scm) clor157)
      (set! clor157 (scm-wrap-fptr classify))
      (declare (struct scm) clor162)
      (set! clor162 (scm-wrap-fptr scm-vector-ref))
      (set! r165 (make-struct (struct scm) (tag 0) (val.i 0)))
      (set! r166 env2498)
      (set! r167 (make-struct (struct scm) (tag 0) (val.i 1)))
      (set! r160 (scm-vector-ref r165 r166 r167))
      (declare (struct scm) clor170)
      (set! clor170 (scm-wrap-fptr scm-minus))
      (set! r168 i)
      (set! r169 (make-struct (struct scm) (tag 0) (val.i 1)))
      (declare (type scm-fptr) clo171)
      (declare (struct scm) env172)
      (set! clo171
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor170 val) v) elt)
              0)
            val)
          f))
      (set! env172
        (array-ref
          (struct->ref (struct-ref (struct-ref clor170 val) v) elt)
          1))
      (refcount-inc-one env172)
      (set! r161 (clo171 env172 r168 r169))
      (refcount-dec-one clor170)
      (declare (type scm-fptr) clo163)
      (declare (struct scm) env164)
      (set! clo163
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor162 val) v) elt)
              0)
            val)
          f))
      (set! env164
        (array-ref
          (struct->ref (struct-ref (struct-ref clor162 val) v) elt)
          1))
      (refcount-inc-one env164)
      (set! r156 (clo163 env164 r160 r161))
      (refcount-dec-one clor162)
      (declare (type scm-fptr) clo158)
      (declare (struct scm) env159)
      (set! clo158
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor157 val) v) elt)
              0)
            val)
          f))
      (set! env159
        (array-ref
          (struct->ref (struct-ref (struct-ref clor157 val) v) elt)
          1))
      (refcount-inc-one env159)
      (set! r144 (clo158 env159 r156))
      (refcount-dec-one clor157)))
  (declare (struct scm) clor174)
  (set! clor174 (scm-wrap-fptr classify))
  (declare (struct scm) clor179)
  (set! clor179 (scm-wrap-fptr scm-vector-ref))
  (set! r182 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r183 env2498)
  (set! r184 (make-struct (struct scm) (tag 0) (val.i 1)))
  (set! r177 (scm-vector-ref r182 r183 r184))
  (set! r178 i)
  (declare (type scm-fptr) clo180)
  (declare (struct scm) env181)
  (set! clo180
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor179 val) v) elt) 0)
        val)
      f))
  (set! env181
    (array-ref (struct->ref (struct-ref (struct-ref clor179 val) v) elt) 1))
  (refcount-inc-one env181)
  (set! r173 (clo180 env181 r177 r178))
  (refcount-dec-one clor179)
  (declare (type scm-fptr) clo175)
  (declare (struct scm) env176)
  (set! clo175
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor174 val) v) elt) 0)
        val)
      f))
  (set! env176
    (array-ref (struct->ref (struct-ref (struct-ref clor174 val) v) elt) 1))
  (refcount-inc-one env176)
  (set! r145 (clo175 env176 r173))
  (refcount-dec-one clor174)
  (declare (struct scm) clor188)
  (set! clor188 (scm-wrap-fptr scm-eq))
  (set! r186 i)
  (declare (struct scm) clor193)
  (set! clor193 (scm-wrap-fptr scm-minus))
  (set! r196 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r197 env2498)
  (set! r198 (make-struct (struct scm) (tag 0) (val.i 0)))
  (set! r191 (scm-vector-ref r196 r197 r198))
  (set! r192 (make-struct (struct scm) (tag 0) (val.i 1)))
  (declare (type scm-fptr) clo194)
  (declare (struct scm) env195)
  (set! clo194
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor193 val) v) elt) 0)
        val)
      f))
  (set! env195
    (array-ref (struct->ref (struct-ref (struct-ref clor193 val) v) elt) 1))
  (refcount-inc-one env195)
  (set! r187 (clo194 env195 r191 r192))
  (refcount-dec-one clor193)
  (declare (type scm-fptr) clo189)
  (declare (struct scm) env190)
  (set! clo189
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor188 val) v) elt) 0)
        val)
      f))
  (set! env190
    (array-ref (struct->ref (struct-ref (struct-ref clor188 val) v) elt) 1))
  (refcount-inc-one env190)
  (set! r185 (clo189 env190 r186 r187))
  (refcount-dec-one clor188)
  (if (scm-extract-truth r185)
    (begin
      (refcount-dec i 1)
      (refcount-dec env2498 1)
      (set! r146 (make-struct (struct scm) (tag 0) (val.i 0))))
    (begin
      (declare (struct scm) clor200)
      (set! clor200 (scm-wrap-fptr classify))
      (declare (struct scm) clor205)
      (set! clor205 (scm-wrap-fptr scm-vector-ref))
      (set! r208 (make-struct (struct scm) (tag 0) (val.i 0)))
      (set! r209 env2498)
      (set! r210 (make-struct (struct scm) (tag 0) (val.i 1)))
      (set! r203 (scm-vector-ref r208 r209 r210))
      (declare (struct scm) clor213)
      (set! clor213 (scm-wrap-fptr scm-plus))
      (set! r211 i)
      (set! r212 (make-struct (struct scm) (tag 0) (val.i 1)))
      (declare (type scm-fptr) clo214)
      (declare (struct scm) env215)
      (set! clo214
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor213 val) v) elt)
              0)
            val)
          f))
      (set! env215
        (array-ref
          (struct->ref (struct-ref (struct-ref clor213 val) v) elt)
          1))
      (refcount-inc-one env215)
      (set! r204 (clo214 env215 r211 r212))
      (refcount-dec-one clor213)
      (declare (type scm-fptr) clo206)
      (declare (struct scm) env207)
      (set! clo206
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor205 val) v) elt)
              0)
            val)
          f))
      (set! env207
        (array-ref
          (struct->ref (struct-ref (struct-ref clor205 val) v) elt)
          1))
      (refcount-inc-one env207)
      (set! r199 (clo206 env207 r203 r204))
      (refcount-dec-one clor205)
      (declare (type scm-fptr) clo201)
      (declare (struct scm) env202)
      (set! clo201
        (struct-ref
          (struct-ref
            (array-ref
              (struct->ref (struct-ref (struct-ref clor200 val) v) elt)
              0)
            val)
          f))
      (set! env202
        (array-ref
          (struct->ref (struct-ref (struct-ref clor200 val) v) elt)
          1))
      (refcount-inc-one env202)
      (set! r146 (clo201 env202 r199))
      (refcount-dec-one clor200)))
  (declare (type scm-fptr) clo148)
  (declare (struct scm) env149)
  (set! clo148
    (struct-ref
      (struct-ref
        (array-ref (struct->ref (struct-ref (struct-ref clor147 val) v) elt) 0)
        val)
      f))
  (set! env149
    (array-ref (struct->ref (struct-ref (struct-ref clor147 val) v) elt) 1))
  (refcount-inc-one env149)
  (set! r143 (clo148 env149 r144 r145 r146))
  (refcount-dec-one clor147)
  (return r143))

